{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","root","createRoot","document","getElementById","library","add","fab","faQuoteLeft","QuoteGenerator","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","src_Quote","React","Component","Quote","_this","state","quotes","quote","author","randomIndex","randomQuote","assertThisInitialized","setState","Math","floor","random","length","currentQuote","currentAuthor","id","index_es","icon","href","target","rel","onClick","render","src_QuoteGenerator"],"mappings":"6PAYeA,SAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,OCGRY,EAAOC,qBAAWC,SAASC,eAAe,SAChDC,IAAQC,IAAIC,IAAKC,SAGXC,cACJ,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAcR,OACEO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,oCACZF,EAAAC,EAAAC,cAACC,EAAD,cAnBqBC,IAAMC,WA0B7BC,cACF,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAb,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACfC,EAAAb,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,KAAMH,KAEDe,MAAQ,CACXC,OAAQ,CAAC,CAACC,MAAS,+CACnBC,OAAU,eACH,CAACD,MAAS,mDACjBC,OAAU,kBACH,CAACD,MAAS,6EACjBC,OAAU,kBACH,CAAED,MAAS,0DAClBC,OAAU,qBACH,CAACD,MAAS,iHACjBC,OAAU,sBACH,CAACD,MAAS,wDACjBC,OAAU,sBACH,CAACD,MAAS,uGACjBC,OAAU,mBACH,CAACD,MAAS,sEACVC,OAAU,uBACX,CAAED,MAAS,yFACXC,OAAU,qBACZ,CAACD,MAAS,iFACVC,OAAU,kBACdC,YAAa,GAEfL,EAAKM,YAAcN,EAAKM,YAAYpC,KAAjBiB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAa,KA1BJA,6EA+BfX,KAAKmB,SAAS,CACZN,OAAQb,KAAKY,MAAMC,OACnBG,YAAaI,KAAKC,MAAMD,KAAKE,SAAWtB,KAAKY,MAAMC,OAAOU,2CAQ5D,IAAIC,EAAexB,KAAKY,MAAMC,OAAOb,KAAKY,MAAMI,aAA7B,MACfS,EAAgBzB,KAAKY,MAAMC,OAAOb,KAAKY,MAAMI,aAA7B,OAEpB,OACIZ,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,aACJtB,EAAAC,EAAAC,cAAA,cAAYoB,GAAG,aACbtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAiBC,KAAK,2BACtBxB,EAAAC,EAAAC,cAAA,MAAIoB,GAAG,QAAQF,IAEjBpB,EAAAC,EAAAC,cAAA,QAAMoB,GAAG,UAAT,KAAqBD,GACrBrB,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,UACNtB,EAAAC,EAAAC,cAAA,KAAGuB,KAAI,mCAAsCC,OAAO,SAASJ,GAAG,cAAcK,IAAI,uBAAsB3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAiBC,KAAK,0BAC9HxB,EAAAC,EAAAC,cAAA,UAAQ0B,QAAShC,KAAKiB,YAAaS,GAAG,aAAtC,sBAtDElB,IAAMC,WA6D1BrB,EAAK6C,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,OAMZ3D","file":"static/js/main.216fb32d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createRoot }from 'react-dom/client';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nconst root = createRoot(document.getElementById('root'));\nlibrary.add(fab, faQuoteLeft);\n\n\nclass QuoteGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    \n  }\n  \n  \n  render() {\n    const colors = ['#7FB77E',\n                '#B1D7B4',\n                '#F7F6DC',\n                '#FFC090'\n               ];\n\n\n\n  return (\n    <div>\n        <header><h1><em>Random Quote Machine</em></h1></header>\n        <Quote />\n        </div>\n    \n  );\n  }\n}\n\nclass Quote extends React.Component {\n    constructor(props) {\n        super(props);\n      \n        this.state = {\n          quotes: [{\"quote\": \"Be yourself; everyone else is already taken.\",\n          \"author\": \"Oscar Wilde\"},\n                 {\"quote\": \"Be the change that you wish to see in the world.\",\n          \"author\": \"Mahatma Gandhi\"},\n                 {\"quote\": \"Live as if you were to die tomorrow. Learn as if you were to live forever.\",\n          \"author\": \"Mahatma Gandhi\"},\n                 { \"quote\": \"No one can make you feel inferior without your consent.\",\n          \"author\": \"Eleanor Roosevelt\"},\n                 {\"quote\": \"Darkness cannot drive out darkness: only light can do that. Hate cannot drive out hate; only love can do that.\",\n          \"author\": \"Martin Luther King\"},\n                 {\"quote\": \"Injustice anywhere is a threat to justice everywhere.\",\n          \"author\": \"Martin Luther King\"},\n                 {\"quote\": \"Imagination is more important than knowledge. Knowledge is limited. Imagination encircles the world.\",\n          \"author\": \"Albert Einstein\"},\n                 {\"quote\": \"Life isn't about finding yourself. Life is about creating yourself.\",\n                 \"author\": \"George Bernard Shaw\"},\n                { \"quote\": \"Success is not final, failure is not fatal: it is the courage to continue that counts.\",\n                \"author\": \"Winston Churchill\"},\n              {\"quote\": \"Kind words can be short and easy to speak, but their echoes are truly endless.\",\n              \"author\": \"Mother Teresa\"}],\n          randomIndex: 0,\n        }\n        this.randomQuote = this.randomQuote.bind(this);\n\n    }\n\n    randomQuote() {\n        this.setState({\n          quotes: this.state.quotes,\n          randomIndex: Math.floor(Math.random() * this.state.quotes.length)\n        })\n    }\n\n   \n\n    render() {\n\n        let currentQuote = this.state.quotes[this.state.randomIndex]['quote'];\n        let currentAuthor = this.state.quotes[this.state.randomIndex]['author'];\n\n        return (\n            <div id=\"container\">\n                <blockquote id=\"quote-box\">\n                  <FontAwesomeIcon icon=\"fa-solid fa-quote-left\" />\n                  <em id='text'>{currentQuote}</em>\n                  </blockquote>\n                <cite id=\"author\">- {currentAuthor}</cite>\n                <div id=\"button\">\n                  <a href={`https://twitter.com/intent/tweet`} target=\"_blank\" id=\"tweet-quote\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon=\"fa-brands fa-twitter\"/></a>\n                  <button onClick={this.randomQuote} id=\"new-quote\">New Quote</button></div>\n            </div>\n            \n        )\n    }\n}\n\nroot.render(<QuoteGenerator/>);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}